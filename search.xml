<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python--Numpy数组</title>
      <link href="/2020/04/06/Numpy%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/06/Numpy%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Numpy库为什么如此高效"><a href="#Numpy库为什么如此高效" class="headerlink" title="Numpy库为什么如此高效"></a>Numpy库为什么如此高效</h3><p><strong>Numpy是由C语音编写，整体执行效率高，Numpy数组内的数据必须是完全统一的，比如全部是浮点型，而Python列表中支持任意类型数据的随意组合，Numpy数组内的数据连续存储在内存中，而Python列表数据分散在内存中，这种存储结构，与一些更加高效的底层处理方法更加的契合，除此之外，Python语言执行有线程锁，无法真正实现多线程，而C语言可以，因此Numpy库的效率更高</strong></p><a id="more"></a><h3 id="什么时候用Numpy"><a href="#什么时候用Numpy" class="headerlink" title="什么时候用Numpy"></a>什么时候用Numpy</h3><p><strong>在数据处理的过程中，遇到for循环实现的一些向量化，矩阵化操作的时候，优先考虑Numpy<br>1、两个向量的点乘<br>2、矩阵乘法</strong></p><h3 id="Numpy数组的创建"><a href="#Numpy数组的创建" class="headerlink" title="Numpy数组的创建"></a>Numpy数组的创建</h3><h4 id="1、通过列表创建"><a href="#1、通过列表创建" class="headerlink" title="1、通过列表创建"></a>1、通过列表创建</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpyx <span class="token operator">=</span> numpy<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"int"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#dtype表示数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h4 id="2、从头创建数组"><a href="#2、从头创建数组" class="headerlink" title="2、从头创建数组"></a>2、从头创建数组</h4><p><strong>（1）创建一维数组初值为0</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示创建一个5个元素都为0的一维数组</span></code></pre><p><strong>（2）创建二维数组初值为1</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>type <span class="token operator">=</span> int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示创建一个2 * 4的int型二维数组，并且初值都为1</span></code></pre><p><strong>（3）创建自定义二维数组</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示创建一个2 * 4的二维数组，并且初值为8</span></code></pre><p><strong>（4）创建单位矩阵</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示创建一个3*3的单位矩阵</span></code></pre><p><strong>（5）创建线性序列</strong></p><pre class=" language-python"><code class="language-python">numpy<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从1到10步长为2创建序列</span></code></pre><p><strong>（6）创建等差数列</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#a1 = 1,a4 = 10</span></code></pre><p><strong>（7）创建等比数列</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#a1 = 2的0次方，a9 = 2的9次方</span></code></pre><p><strong>（8）创建0-1之间随机分布的数组</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#生成一个3 * 3的元素都为0-1之间随机分布的数组</span></code></pre><p><strong>（9）创建整数类型的随机数组</strong></p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个0-10之间随机元素组成的3*3的二维矩阵</span></code></pre><p><strong>Tip：Numpy数组中的切片与Python列表基本一致</strong></p><h3 id="Numpy数组的属性"><a href="#Numpy数组的属性" class="headerlink" title="Numpy数组的属性"></a>Numpy数组的属性</h3><h4 id="1、shape返回数组的形状"><a href="#1、shape返回数组的形状" class="headerlink" title="1、shape返回数组的形状"></a>1、shape返回数组的形状</h4><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回数组的行</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回数组的列</span></code></pre><h4 id="2、nidm返回数组的维度"><a href="#2、nidm返回数组的维度" class="headerlink" title="2、nidm返回数组的维度"></a>2、nidm返回数组的维度</h4><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>nidm<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里输出的结果就为2，因为是2维数组</span></code></pre><h4 id="3、size返回数组的大小（即元素个数）"><a href="#3、size返回数组的大小（即元素个数）" class="headerlink" title="3、size返回数组的大小（即元素个数）"></a>3、size返回数组的大小（即元素个数）</h4><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> numpy<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里输出的结果就为8，因为是2*4的二维数组</span></code></pre><h3 id="Numpy数组的变形"><a href="#Numpy数组的变形" class="headerlink" title="Numpy数组的变形"></a>Numpy数组的变形</h3><h4 id="1、reshape-n-m"><a href="#1、reshape-n-m" class="headerlink" title="1、reshape(n,m):"></a>1、reshape(n,m):</h4><p>将数组转换为n行m列的数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span></code></pre><h4 id="2、flatten-："><a href="#2、flatten-：" class="headerlink" title="2、flatten()："></a>2、flatten()：</h4><p><strong>将数组转换为一维向量（返回的是副本）</strong></p><h4 id="3、ravel"><a href="#3、ravel" class="headerlink" title="3、ravel():"></a>3、ravel():</h4><p><strong>将数组转换为一维向量（返回的是视图）</strong></p><h3 id="Numpy数组的拼接"><a href="#Numpy数组的拼接" class="headerlink" title="Numpy数组的拼接"></a>Numpy数组的拼接</h3><h4 id="1、np-hstack-np-c-："><a href="#1、np-hstack-np-c-：" class="headerlink" title="1、np.hstack()/np.c_[]："></a>1、np.hstack()/np.c_[]：</h4><p><strong>水平拼接，要保证两个数组的行数一致</strong></p><h4 id="2、np-vstack-np-r"><a href="#2、np-vstack-np-r" class="headerlink" title="2、np.vstack()/np.r_[]:"></a>2、np.vstack()/np.r_[]:</h4><p><strong>垂直拼接，要保证两个数组列数一致</strong></p><h3 id="Numpy数组的分割："><a href="#Numpy数组的分割：" class="headerlink" title="Numpy数组的分割："></a>Numpy数组的分割：</h3><h4 id="1、np-hsplit-x-2-4"><a href="#1、np-hsplit-x-2-4" class="headerlink" title="1、np.hsplit(x,[2,4]):"></a>1、np.hsplit(x,[2,4]):</h4><p><strong>水平分割，将数组x从第2行，第四行分割成三部分</strong></p><h4 id="2、np-vsplit-x-2-4"><a href="#2、np-vsplit-x-2-4" class="headerlink" title="2、np.vsplit(x,[2,4]):"></a>2、np.vsplit(x,[2,4]):</h4><p><strong>垂直分割，将数组x从第2列，第四列分割成三部分</strong></p><h3 id="Numpy数组的运算："><a href="#Numpy数组的运算：" class="headerlink" title="Numpy数组的运算："></a>Numpy数组的运算：</h3><h4 id="向量运算："><a href="#向量运算：" class="headerlink" title="向量运算："></a>向量运算：</h4><p><strong>Numpy数组在执行运算时，是对数组内的每一个元素进行运算，下面介绍除基本运算以外的其他运算</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>np.abs(x)</td><td>对x中的所有元素进行绝对值运算</td></tr><tr><td>np.sin(x) / np.cos(x) / np.tan(x) / np.arcsin(x) / np.arccos(x) / np.arctan(x)</td><td>对x中的元素进行三角函数及反三角函数的相关运算</td></tr><tr><td>np.exp(x)</td><td>对x中的元素进行指数运算（e）</td></tr><tr><td>np.ln(x) / np.log2(x) / np.log10(x)</td><td>对x中的元素进行对数运算（以e/2/10为底）</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><h4 id="矩阵运算："><a href="#矩阵运算：" class="headerlink" title="矩阵运算："></a>矩阵运算：</h4><p><strong>（1）x.T：返回x的转置矩阵</strong><br><strong>（2）x.dot(y) / np.dot(x,y)：返回矩阵x与矩阵y相乘的结果，这里与x * y不同，x * y是向量相乘也就是对应项相乘，而矩阵的乘法要严格遵守数学中的矩阵乘法规则</strong></p><h4 id="比较运算和掩码"><a href="#比较运算和掩码" class="headerlink" title="比较运算和掩码"></a>比较运算和掩码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成一个2行3列，数据由-3~3构成的数组</span>x2 <span class="token operator">=</span> x1 <span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#返回x1 > 0 的布尔数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span></code></pre><p><strong>np.sum()</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成一个2行3列，数据由-3~3构成的数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这里返回的不是大于0的数字的和，而是大于0的数字个数</span></code></pre><p><strong>np.all()</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成一个2行3列，数据由-3~3构成的数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>all<span class="token punctuation">(</span>x1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#如果数组x1中所有的元素都满足大于0的条件输出True，否则输出False</span></code></pre><p><strong>np.any()</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成一个2行3列，数据由-3~3构成的数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>any<span class="token punctuation">(</span>x1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#如果数组x1中至少有一个元素都满足大于0的条件输出True，否则输出False</span></code></pre><h4 id="将布尔数组作为掩码"><a href="#将布尔数组作为掩码" class="headerlink" title="将布尔数组作为掩码"></a>将布尔数组作为掩码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成一个2行3列，数据由-3~3构成的数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span>x1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将布尔数组中所有返回为True的元素输出</span></code></pre><h4 id="花哨索引"><a href="#花哨索引" class="headerlink" title="花哨索引"></a>花哨索引</h4><p><strong>一维向量的花哨索引：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#建立一个一维数组</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#输出下标为0,2,4的元素</span></code></pre><p><strong>二维向量的花哨索引：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#建立一个一维数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#输出下标为[0,1],[1,2]的元素</span></code></pre><h3 id="Numpy中的广播"><a href="#Numpy中的广播" class="headerlink" title="Numpy中的广播"></a>Numpy中的广播</h3><p>NumPy中，形状不同的数组之间也可以进行运算。之前的例子中，在 2×2的矩阵A和标量10之间进行了乘法运算。在这个过程中，如图所示， 标量10被扩展成了2×2的形状，然后再与矩阵A进行乘法运算。这个巧妙 的功能称为广播（broadcast）。</p><p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Python-Numpy%E6%95%B0%E7%BB%84/Img01.png" alt="" loading="lazy"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2行3列的二维数组</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#一维数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token operator">*</span>x2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#相乘时一维数组自动扩展，变为二维数组，再进行相乘</span></code></pre><p>Tip：Numpy数组在数据处理中尤为重要🙃</p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Bash命令</title>
      <link href="/2020/04/04/Linux-Bash%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/04/Linux-Bash%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux命令："><a href="#Linux命令：" class="headerlink" title="Linux命令："></a>Linux命令：</h3><h4 id="echo-lt-内容-gt"><a href="#echo-lt-内容-gt" class="headerlink" title="echo &lt;内容&gt;"></a>echo &lt;内容&gt;</h4><p>输出内容，与C/C++中的printf类似</p><h4 id="date"><a href="#date" class="headerlink" title="date:"></a>date:</h4><p>显示时间</p><h4 id="cal："><a href="#cal：" class="headerlink" title="cal："></a>cal：</h4><p>显示当月日历</p><a id="more"></a><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd:"></a>pwd:</h4><p>显示当前工作目录</p><h4 id="ls："><a href="#ls：" class="headerlink" title="ls："></a>ls：</h4><ul><li><h5 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a:"></a>ls -a:</h5><p>显示所有隐藏文件</p></li><li><h5 id="ls-l："><a href="#ls-l：" class="headerlink" title="ls -l："></a>ls -l：</h5><p>显示更加详细的文件列表</p></li><li><h5 id="ls-lt-folder-gt-："><a href="#ls-lt-folder-gt-：" class="headerlink" title="ls &lt;folder&gt;："></a>ls &lt;folder&gt;：</h5><p>显示特定的文件夹内容</p></li></ul><h4 id="cd："><a href="#cd：" class="headerlink" title="cd："></a>cd：</h4><ul><li><h5 id="cd"><a href="#cd" class="headerlink" title="cd ../:"></a>cd ../:</h5><p>返回父目录</p></li><li><h5 id="cd-lt-Directory-gt-："><a href="#cd-lt-Directory-gt-：" class="headerlink" title="cd &lt;Directory&gt;："></a>cd &lt;Directory&gt;：</h5><p>进入特定的目录下</p></li><li><h5 id="cd-1"><a href="#cd-1" class="headerlink" title="cd:"></a>cd:</h5><p>返回主目录</p></li></ul><h4 id="mkdir："><a href="#mkdir：" class="headerlink" title="mkdir："></a>mkdir：</h4><p>创建文件夹</p><h4 id="touch："><a href="#touch：" class="headerlink" title="touch："></a>touch：</h4><p>创建文件</p><h5 id="rm："><a href="#rm：" class="headerlink" title="rm："></a>rm：</h5><p>删除文件</p><h4 id="rmdir："><a href="#rmdir：" class="headerlink" title="rmdir："></a>rmdir：</h4><p>删除文件夹</p><h4 id="cat"><a href="#cat" class="headerlink" title="cat:"></a>cat:</h4><p>读取文件并输出其内容，若查看多个文件，依次在cat后输入文件名即可</p><h4 id="less："><a href="#less：" class="headerlink" title="less："></a>less：</h4><p>读取文件并输出其内容，与cat类似，但是当文件内容较多时，推荐使用less，less会生成一个新窗口并展示内容</p><ul><li><p>/：</p><p>找到特定的内容</p></li><li><p>q：</p><p>退出less</p></li></ul><h4 id="Pipelinesand-Filters管道和过滤器"><a href="#Pipelinesand-Filters管道和过滤器" class="headerlink" title="Pipelinesand Filters管道和过滤器"></a>Pipelinesand Filters管道和过滤器</h4><p>管道运算符“|”（垂直条）是一种将一个命令的输出作为输入发送到另一个命令的方法。</p><p>command1 | command2</p><p>当命令将其输出发送到管道时，该输出的接收端是另一个命令，而不是文件</p><h4 id="grep-lt-内容-gt-lt-文件-gt"><a href="#grep-lt-内容-gt-lt-文件-gt" class="headerlink" title="grep &lt;内容&gt; &lt;文件&gt;:"></a>grep &lt;内容&gt; &lt;文件&gt;:</h4><p>搜索具有给定字符串的行或查找指定输入流中的模式</p><h4 id="wc："><a href="#wc：" class="headerlink" title="wc："></a>wc：</h4><p>利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则wc指令会从标准输入设备读取数据。</p><ul><li><h5 id="wc-c："><a href="#wc-c：" class="headerlink" title="wc -c："></a>wc -c：</h5><p>显示Bytes数。</p></li><li><h5 id="wc-l："><a href="#wc-l：" class="headerlink" title="wc -l："></a>wc -l：</h5><p>显示行数。</p></li><li><h5 id="wc-w："><a href="#wc-w：" class="headerlink" title="wc -w："></a>wc -w：</h5><p>显示字数。</p></li></ul><h4 id="sort："><a href="#sort：" class="headerlink" title="sort："></a>sort：</h4><ul><li><p>sort -b：</p><p>忽略每行前面开始出的空格字符。</p></li><li><p>sort -c：</p><p>检查文件是否已经按照顺序排序。</p></li><li><p>sort -d：</p><p>排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</p></li><li><p>sort -f：</p><p>排序时，将小写字母视为大写字母。</p></li><li><p>sort -i：</p><p>排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</p></li><li><p>sort -m：</p><p>将几个排序好的文件进行合并。</p></li><li><p>sort -M：</p><p>将前面3个字母依照月份的缩写进行排序。</p></li><li><p>sort -n：</p><p>依照数值的大小排序。</p></li></ul><h3 id="试验："><a href="#试验：" class="headerlink" title="试验："></a>试验：</h3><p>这里我使用Git Bash进行试验</p><p>进入d盘建立MyTest文件夹，并在该文件夹下创建Test文本文件</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-Linux-Bash%E5%91%BD%E4%BB%A4/%E8%AF%95%E9%AA%8C1/%E8%AF%95%E9%AA%8C1.1.PNG" style="zoom: 75%;" / loading="lazy"><p>进入vim对Test.txt进行编辑，cat命令显示出编辑后的内容，利用通道对该文件进行排序，并显示排序后的内容</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-Linux-Bash%E5%91%BD%E4%BB%A4/%E8%AF%95%E9%AA%8C1/%E8%AF%95%E9%AA%8C1.2.PNG" style="zoom:75%;" / loading="lazy"><p>在MyTest文件夹下新建Test2文本文档，进入vim编辑，并查看编辑后的文件内容</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-Linux-Bash%E5%91%BD%E4%BB%A4/%E8%AF%95%E9%AA%8C1/%E8%AF%95%E9%AA%8C1.3.PNG" style="zoom:75%;" / loading="lazy"><p>显示Test2.txt的内容，并将Test和Test2合并为一个MainTest</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-Linux-Bash%E5%91%BD%E4%BB%A4/%E8%AF%95%E9%AA%8C1/%E8%AF%95%E9%AA%8C1.4.PNG" style="zoom:75%;" / loading="lazy"><p>显示合并后MainTest的内容</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-Linux-Bash%E5%91%BD%E4%BB%A4/%E8%AF%95%E9%AA%8C1/%E8%AF%95%E9%AA%8C1.5.PNG" style="zoom:75%;" / loading="lazy"><p>持续更新中…</p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyDesigner+PyQt5+Pycharm配置</title>
      <link href="/2020/04/03/PyQt5-Pycharm%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/03/PyQt5-Pycharm%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>由于QT Desginer 在创建窗体项目时会自动生成扩展名为.ui的文件，该文件需要转换为.py文件后才能被Python所识别，所以需要为QT Designer与Pycharm开发工具进行配置。</p><a id="more"></a><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>进入Pycharm后点击左上角的File，在菜单中找到Settings，依次点击Tools,External Tools，如下图：</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-PyQt5-Pycharm%E9%85%8D%E7%BD%AE/Post-Img-1.png" style="zoom:80%;" / loading="lazy"><p>（这里因为我已经提前完成安装，所以上面已经显示了两个插件）点击加号，在Program一栏添加designer的安装路径，其他内容按照下图填写最后点击OK：</p><img src="https://personalblog-1301685299.cos.ap-nanjing.myqcloud.com/MyBlog-Images/Post-PyQt5-Pycharm%E9%85%8D%E7%BD%AE/Post-Img-2.png" style="zoom:80%;" / loading="lazy"><p>在配置PyQt5时同样点击加号，在Name一栏添加PyUic，在Program一栏添加Python的安装路径，Arguments一栏添加：</p><pre><code>-m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code></pre><p>Working directory一栏添加：</p><pre><code>$FileDir$</code></pre><p>最后点击OK</p><p>在配置qrcTopy时同样点击加号，在Name一栏添加QrcTopy在，Program一栏添加pyrcc5的安装路径，Arguments一栏添加：</p><pre><code>$FileName$ -o $FileNameWithoutExtension$_rc.py</code></pre><p>Working directory一栏添加：</p><pre><code>$FileDir$</code></pre><p>最后点击OK。</p><p>以上就是所有的配置步骤，完成配置后，就可以在Pycharm里创建自己的UI文件啦😝</p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5简介</title>
      <link href="/2020/04/03/PyQt5%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/04/03/PyQt5%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>PyQt5是一套Python绑定Digia QT5应用的框架。作为Python中的一个重要模块，它可用于Python 2和3。Qt库是最强大的GUI库之一。</p><a id="more"></a><h2 id="具体分类："><a href="#具体分类：" class="headerlink" title="具体分类："></a>具体分类：</h2><p>PyQt5分为以下几个模块：</p><h3 id="QtCore"><a href="#QtCore" class="headerlink" title="QtCore:"></a>QtCore:</h3><p>包含了核心的非GUI功能。此模块用于处理时间、文件和目录、各种数据类型、流、URL、MIME类型、线程或进程。</p><h3 id="QtGui："><a href="#QtGui：" class="headerlink" title="QtGui："></a>QtGui：</h3><p>包含类窗口系统集成、事件处理、二维图形、基本成像、字体和文本。</p><h3 id="QtWidgets："><a href="#QtWidgets：" class="headerlink" title="QtWidgets："></a>QtWidgets：</h3><p>模块包含创造经典桌面风格的用户界面提供了一套UI元素的类。</p><h3 id="QtMultimedia："><a href="#QtMultimedia：" class="headerlink" title="QtMultimedia："></a>QtMultimedia：</h3><p>包含的类来处理多媒体内容和API来访问相机和收音机的功能。</p><h3 id="Qtbluetooth："><a href="#Qtbluetooth：" class="headerlink" title="Qtbluetooth："></a>Qtbluetooth：</h3><p>模块包含类的扫描设备和连接并与他们互动。描述模块包含了网络编程的类。这些类便于TCP和IP和UDP客户端和服务器的编码，使网络编程更容易和更便携。</p><h3 id="Qtpositioning："><a href="#Qtpositioning：" class="headerlink" title="Qtpositioning："></a>Qtpositioning：</h3><p>包含类的利用各种可能的来源，确定位置，包括卫星、Wi-Fi、或一个文本文件。</p><h3 id="Enginio："><a href="#Enginio：" class="headerlink" title="Enginio："></a>Enginio：</h3><p>模块实现了客户端库访问Qt云服务托管的应用程序运行时。</p><h3 id="Qtwebsockets："><a href="#Qtwebsockets：" class="headerlink" title="Qtwebsockets："></a>Qtwebsockets：</h3><p>模块包含实现WebSocket协议类。</p><h3 id="QtWebKit："><a href="#QtWebKit：" class="headerlink" title="QtWebKit："></a>QtWebKit：</h3><p>包含一个基于Webkit2图书馆Web浏览器实现类。</p><h3 id="Qtwebkitwidgets："><a href="#Qtwebkitwidgets：" class="headerlink" title="Qtwebkitwidgets："></a>Qtwebkitwidgets：</h3><p>包含的类的基础webkit1一用于qtwidgets应用Web浏览器的实现。</p><h3 id="QtXml："><a href="#QtXml：" class="headerlink" title="QtXml："></a>QtXml：</h3><p>包含与XML文件的类。这个模块为SAX和DOM API提供了实现。</p><h3 id="QtSvg："><a href="#QtSvg：" class="headerlink" title="QtSvg："></a>QtSvg：</h3><p>模块提供了显示SVG文件内容的类。可伸缩矢量图形（SVG）是一种描述二维图形和图形应用的语言。 QtSql：模块提供操作数据库的类。</p><h3 id="QtTest："><a href="#QtTest：" class="headerlink" title="QtTest："></a>QtTest：</h3><p>包含的功能，使pyqt5应用程序的单元测试</p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeJam2019-Qualification</title>
      <link href="/2020/04/02/CodeJam2019-Qualification/"/>
      <url>/2020/04/02/CodeJam2019-Qualification/</url>
      
        <content type="html"><![CDATA[<h2 id="Foregone-Solution-6pts-10pts-1pts"><a href="#Foregone-Solution-6pts-10pts-1pts" class="headerlink" title="Foregone Solution (6pts, 10pts, 1pts)"></a>Foregone Solution (6pts, 10pts, 1pts)</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Someone just won the Code Jam lottery, and we owe them <strong>N</strong> jamcoins!  However, when we tried to print out an oversized check, we encountered a  problem. The value of <strong>N</strong>, which is an integer, includes at least one  digit that is a <code>4</code>… and the <code>4</code> key on the keyboard  of our oversized check printer is broken.</p><p>  Fortunately, we have a workaround: we will send our winner two checks for  positive integer amounts A and B, such that neither A nor B contains any  digit that is a <code>4</code>, and A + B = <strong>N</strong>. Please help us find any  pair of values A and B that satisfy these conditions.</p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>  The first line of the input gives the number of test cases, <strong>T</strong>.  <strong>T</strong> test cases follow; each consists of one line with an integer  <strong>N</strong>.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>  For each test case, output one line containing <code>Case #x: A B</code>,  where <code>x</code> is the test case number (starting from 1), and  <code>A</code> and <code>B</code> are positive integers as described above.</p><p>  It is guaranteed that at least one solution exists. If there are multiple  solutions, you may output any one of them. (See  “What if a test case has multiple correct solutions?” in the Competing  section of the  <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>. This  information about multiple solutions will not be explicitly stated in the  remainder of the 2019 contest.)</p><h3 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h3><p>  1 ≤ <strong>T</strong> ≤ 100.<br>  Time limit: 10 seconds per test set.<br>  Memory limit: 1GB.<br>  At least one of the digits of <strong>N</strong> is a 4.</p><h4 id="Test-set-1-Visible"><a href="#Test-set-1-Visible" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>  1 &lt; <strong>N</strong> &lt; 105.</p><h4 id="Test-set-2-Visible"><a href="#Test-set-2-Visible" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>  1 &lt; <strong>N</strong> &lt; 109.</p><p>Solving the first two test sets for this problem should get you a long way toward advancing. The third test set is worth only 1 extra point, for extra fun and bragging rights!</p><h4 id="Test-set-3-Hidden"><a href="#Test-set-3-Hidden" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>  1 &lt; <strong>N</strong> &lt; 10100.</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p><strong>Input</strong></p><p>3</p><p>4</p><p>940</p><p>4444</p><p><strong>Output</strong>     </p><p>Case #1: 2 2</p><p>Case #2: 852 88</p><p>Case #3: 667 3777   </p><p> In Sample Case #1, notice that A and B can be the same. The only other  possible answers are <code>1 3</code> and <code>3 1</code>.</p><p><strong>题目大意：</strong></p><p><strong>给出一个整数n，这个整数包含若干个4，要求将该整数转换为两个不含4的数字，答案不唯一</strong></p><p><strong>题解：</strong></p><p><strong>遍历碰到4就将4转换为1，3分别赋值给两个整数，如果不是4就赋值为0</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string tpl<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>string <span class="token function">fun</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    string st <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        st <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> st<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> tpl<span class="token punctuation">;</span>        string s1 <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpl<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tpl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">)</span>                s1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">,</span>s2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'3'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                s1 <span class="token operator">+</span><span class="token operator">=</span> tpl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cnt <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fun</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="You-Can-Go-Your-Own-Way-5pts-9pts-10pts"><a href="#You-Can-Go-Your-Own-Way-5pts-9pts-10pts" class="headerlink" title="You Can Go Your Own Way (5pts, 9pts, 10pts)"></a>You Can Go Your Own Way (5pts, 9pts, 10pts)</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>  You have just entered the world’s easiest maze. You start in the northwest  cell of an <strong>N</strong> by <strong>N</strong> grid of unit cells, and you must reach the  southeast cell. You have only two types of moves available: a unit move to  the east, and a unit move to the south. You can move into any cell, but you  may not make a move that would cause you to leave the grid.</p><p>  You are excited to be the first in the world to solve the maze, but then  you see footprints. Your rival, Labyrinth Lydia, has already solved the maze  before you, using the same rules described above!</p><p>  As an original thinker, you do not want to reuse any of Lydia’s moves.  Specifically, if her path includes a unit move from some cell A to some  adjacent cell B, your path cannot also include a move from A to B.  (However, in that case, it is OK for your path to visit A or visit B, as long  as you do not go from A to B.) Please find such a path.</p><p>  In the following picture, Lydia’s path is indicated in blue, and one  possible valid path for you is indicated in orange:</p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>  The first line of the input gives the number of test cases, <strong>T</strong>.  <strong>T</strong> test cases follow; each case consists of two lines. The first line  contains one integer <strong>N</strong>, giving the dimensions of the maze, as  described above. The second line contains a string <strong>P</strong> of 2<strong>N</strong> - 2  characters, each of which is either uppercase <code>E</code> (for east) or  uppercase <code>S</code> (for south), representing Lydia’s valid path  through the maze.</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>  For each test case, output one line containing <code>Case #x: y</code>, where  <code>x</code> is the test case number (starting from 1) and <code>y</code>  is a string of 2<strong>N</strong> - 2 characters each of which is either uppercase  <code>E</code> (for east) or uppercase <code>S</code> (for south),  representing your valid path through the maze that does not conflict with  Lydia’s path, as described above. It is guaranteed that at least one  answer exists.</p><h3 id="Limits-1"><a href="#Limits-1" class="headerlink" title="Limits"></a>Limits</h3><p>  1 ≤ <strong>T</strong> ≤ 100.<br>  Time limit: 15 seconds per test set.<br>  Memory limit: 1GB.<br> <strong>P</strong> contains exactly <strong>N</strong> - 1 <code>E</code> characters and exactly    <strong>N</strong> - 1 <code>S</code> characters.</p><h4 id="Test-set-1-Visible-1"><a href="#Test-set-1-Visible-1" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>  2 ≤ <strong>N</strong> ≤ 10.</p><h4 id="Test-set-2-Visible-1"><a href="#Test-set-2-Visible-1" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>  2 ≤ <strong>N</strong> ≤ 1000.</p><h4 id="Test-set-3-Hidden-1"><a href="#Test-set-3-Hidden-1" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>  For at most 10 cases, 2 ≤ <strong>N</strong> ≤ 50000.<br>  For all other cases, 2 ≤ <strong>N</strong> ≤ 10000.</p><h3 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h3><p><strong>Input</strong> </p><p>2</p><p>2</p><p>SE</p><p>5</p><p>EESSSESE</p><p><strong>Output</strong>    </p><p>Case #1: ES </p><p>Case #2: SEEESSES</p><p>In Sample Case #1, the maze is so small that there is only one valid  solution left for us.</p><p>Sample Case #2 corresponds to the picture above. Notice that it is acceptable  for the paths to cross.</p><p><strong>题目大意:</strong></p><p>从左上角走到右下角，且不能与Lydia走过的路重合，输出方向，答案不唯一。</p><p><strong>题解：</strong></p><p>反转Lydia所走过的道路即可</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> m<span class="token punctuation">;</span>        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>        string st <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">)</span> st <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'S'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> st <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cnt <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> st <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Problem Address：</p><p>[<a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000051705]" target="_blank" rel="noopener">https://codingcompetitions.withgoogle.com/codejam/round/0000000000051705]</a>: </p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常见问题处理</title>
      <link href="/2019/05/20/Python%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
      <url>/2019/05/20/Python%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Python库安装失败："><a href="#Python库安装失败：" class="headerlink" title="Python库安装失败："></a>Python库安装失败：</h2><p><strong>当安装Python中的某些库时，命令行执行<code>pip install 库名</code>经常会超时，为了解决这个问题，可以使用一些国内镜像，清华大学镜像：<a href="https://pypi.mirrors.ustc.edu.cn/simple/。" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/。</a></strong></p><h4 id="国内镜像使用方法："><a href="#国内镜像使用方法：" class="headerlink" title="国内镜像使用方法："></a>国内镜像使用方法：</h4><pre class=" language-cmd"><code class="language-cmd">pip install 库名 --index https://pypi.mirrors.ustc.edu.cn/simple/</code></pre><a id="more"></a><h2 id="命令行要求Python升级失败："><a href="#命令行要求Python升级失败：" class="headerlink" title="命令行要求Python升级失败："></a>命令行要求Python升级失败：</h2><p><strong>当命令行要求更新Python，但执行<code>python -m pip install --upgrade pip</code>后仍然显示更新失败，那么可以使用如下方法：<br>打开Python安装目录，找到Lib目录下的sit-packages文件夹，找到文件名为 <code>pip-版本号.dis-info</code>的文件并删除，然后在命令行重新执行<code>python -m pip install --upgrade pip</code>。<br>如果仍然提示安装失败，那么有可能是因为超时造成的，可以使用国内镜像安装，方法如下：<br>在命令行输入：<code>python -m pip install --upgrade pip -i https://pypi.douban.com/simple</code>，这里用的是豆瓣的国内镜像，经过上述两种方法便可以解决Python安装失败的问题</strong></p><h2 id="open函数打开文件报错"><a href="#open函数打开文件报错" class="headerlink" title="open函数打开文件报错:"></a>open函数打开文件报错:</h2><p><strong>在使用open()函数打开.txt的文本文件时，如果打开的文件是中文格式，要使用encoding = “utf-8”，往往txt文件的保存编码是ANSI格式的，所以要在另存为时更改txt文件保存编码为UTF-8，这样才能保证不报错</strong></p><h2 id="Pystaller打包时Jieba库报错："><a href="#Pystaller打包时Jieba库报错：" class="headerlink" title="Pystaller打包时Jieba库报错："></a>Pystaller打包时Jieba库报错：</h2><p><strong>在使用Jieba分词+Pyinstaller打包时经常会出现一些报错：</strong><br><strong>①错误提示：FileNotFoundError：No such file or directory<br>这是因为jieba库在运行时会去默认Python路径下去寻找dict.txt文件。而我们使用PyInstaller打包时，并没有将该dict.txt文件打包。<br>处理方法:<br>在代码前加入如下语句</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jiebajieba<span class="token punctuation">.</span>set_dictionary<span class="token punctuation">(</span><span class="token string">"./dict.txt"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#指定dict.txt加载路径，为了方便部署，使用相对路径。</span>jieba<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">#jieba库初始化。</span></code></pre><p><strong>②错误提示：DLL load failed:1% 不是有效的Win32应用程序<br>这种情况一般是Win32和Python版本不一致造成的，可能下载的Win是32位的，Python是64位的，只要让两个一致即可，重新安装一般就可以解决</strong></p><p>持续更新中…</p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jieba库</title>
      <link href="/2019/05/17/Python-Jieba%E5%BA%93/"/>
      <url>/2019/05/17/Python-Jieba%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p><strong>jieba是优秀的中文分词第三方库<br>-中文文本需要通过分词获得单个的词语<br>-jieba是优秀的中文分词第三方库，需要额外安装</strong></p><a id="more"></a><h2 id="Jieba分词原理："><a href="#Jieba分词原理：" class="headerlink" title="Jieba分词原理："></a>Jieba分词原理：</h2><p><strong>jieba分词依靠中文词库<br>-利用一个中文词库，确定汉字之间的关联概率<br>-汉字间概率大的组成词组，形成分词结果</strong></p><h2 id="Jieba分词的三种模式："><a href="#Jieba分词的三种模式：" class="headerlink" title="Jieba分词的三种模式："></a>Jieba分词的三种模式：</h2><p><strong>-精确模式：把文本精确的切分开，不存在冗余<br>-全模式：把文本中所有可能的次元都扫描出来，有冗余<br>-搜索引擎模式：在精确模式基础上，对场次再次切分</strong></p><table><thead><tr><th>函数及方法</th><th>描述</th></tr></thead><tbody><tr><td>jieba.lcut(s)</td><td>精确某事，返回一个列表类型的分词结果</td></tr><tr><td>jieba.lcut(s,cut_all = True)</td><td>全模式，返回一个列表类型的分词结果，存在冗余</td></tr><tr><td>jieba.lcut_for_searh(s)</td><td>搜索引擎模式，返回一个列表类型的分词结果，存在冗余</td></tr><tr><td>jieba.add_word(w)</td><td>向分词词典增加新词w</td></tr></tbody></table><p><strong>实例1:</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#中文文本词频统计--三国演义人物出场统计</span><span class="token keyword">import</span> jieba <span class="token keyword">as</span> j<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#打开文本</span>    txt <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:\Python\素材\THREEKINGDOMS.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    words <span class="token operator">=</span> j<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#调用jieba库中的lcut函数进行分词</span>    <span class="token keyword">return</span> words        <span class="token comment" spellcheck="true">#返回一个列表，包含分词后的数据</span>words <span class="token operator">=</span> getText<span class="token punctuation">(</span><span class="token punctuation">)</span>excludes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"将军"</span><span class="token punctuation">,</span><span class="token string">"却说"</span><span class="token punctuation">,</span><span class="token string">"荆州"</span><span class="token punctuation">,</span><span class="token string">"二人"</span><span class="token punctuation">,</span><span class="token string">"不可"</span><span class="token punctuation">,</span><span class="token string">"不能"</span><span class="token punctuation">,</span><span class="token string">"如此"</span><span class="token punctuation">,</span><span class="token string">"军士"</span><span class="token punctuation">,</span><span class="token string">"主公"</span><span class="token punctuation">,</span><span class="token string">"如何"</span><span class="token punctuation">,</span><span class="token string">"商议"</span><span class="token punctuation">,</span><span class="token string">"军马"</span><span class="token punctuation">,</span><span class="token string">"左右"</span><span class="token punctuation">,</span><span class="token string">"引兵"</span><span class="token punctuation">,</span><span class="token string">"次日"</span><span class="token punctuation">,</span><span class="token string">"大喜"</span><span class="token punctuation">,</span><span class="token string">"天下"</span><span class="token punctuation">,</span><span class="token string">"东吴"</span>\    <span class="token punctuation">,</span><span class="token string">"于是"</span><span class="token punctuation">,</span><span class="token string">"今日"</span><span class="token punctuation">,</span><span class="token string">"不敢"</span><span class="token punctuation">,</span><span class="token string">"魏兵"</span><span class="token punctuation">,</span><span class="token string">"陛下"</span><span class="token punctuation">,</span><span class="token string">"一人"</span><span class="token punctuation">,</span><span class="token string">"都督"</span><span class="token punctuation">,</span><span class="token string">"人马"</span><span class="token punctuation">,</span><span class="token string">"不知"</span><span class="token punctuation">}</span>counts <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#新建一个字典</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">elif</span> word <span class="token operator">==</span> <span class="token string">"诸葛亮"</span> <span class="token operator">or</span> word <span class="token operator">==</span> <span class="token string">"孔明曰"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"孔明"</span>    <span class="token keyword">elif</span> word <span class="token operator">==</span> <span class="token string">"关公"</span> <span class="token operator">or</span> word <span class="token operator">==</span> <span class="token string">"云长"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"关羽"</span>    <span class="token keyword">elif</span> word <span class="token operator">==</span> <span class="token string">"玄德"</span> <span class="token operator">or</span> word <span class="token operator">==</span> <span class="token string">"玄德曰"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"刘备"</span>    <span class="token keyword">elif</span> word <span class="token operator">==</span> <span class="token string">"孟德"</span> <span class="token operator">or</span> word <span class="token operator">==</span> <span class="token string">"丞相"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"曹操"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> word    counts<span class="token punctuation">[</span>rword<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>rword<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true">#对字典中键对应的值进行赋值</span><span class="token keyword">for</span> word <span class="token keyword">in</span> excludes<span class="token punctuation">:</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>items <span class="token operator">=</span> list<span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#将字典中的键值对放入序列items</span>items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#根据值进行排序，因为默认从小到大，所以在排序后反转</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"三国演义人物出场统计TOP10:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span>count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;10}{:>5}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>word<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pause'</span><span class="token punctuation">)</span></code></pre><p><strong>实例2：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#英文文本词频统计--哈姆雷特</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    txt <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:\Python\素材\HAMLET.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> txt<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'!"#$%&amp;()*+,_-./:;&lt;=>?@[\\]^_{|}~'</span><span class="token punctuation">:</span>        txt <span class="token operator">=</span> txt<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> txthamletTxt <span class="token operator">=</span> getText<span class="token punctuation">(</span><span class="token punctuation">)</span>words <span class="token operator">=</span> hamletTxt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>counts <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>items <span class="token operator">=</span> list<span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哈姆雷特词频统计:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span>count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:&lt;10}{:>5}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>word<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pause'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件和数据格式化</title>
      <link href="/2019/05/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89/"/>
      <url>/2019/05/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="文件的使用："><a href="#文件的使用：" class="headerlink" title="文件的使用："></a>文件的使用：</h2><p><strong>数据的抽象和集合</strong><br><strong>-文件时存储在辅助存储器上当数据序列<br>-文件时数据存储的一种形式<br>-两种形态文本文件和二级制文件</strong><br><strong>文本文件：由单一特定编码组成的文件，如UTF-8编码，简单来说，文本文件就是一个字符串</strong><br><strong>二进制文件：直接由比特0和1组成，没用统一字符编码</strong></p><a id="more"></a><h3 id="文件的打开和关闭："><a href="#文件的打开和关闭：" class="headerlink" title="文件的打开和关闭："></a>文件的打开和关闭：</h3><p><strong>文件处理的步骤：打开–操作–关闭</strong><br><strong>文件的打开：&lt;变量名&gt; = open(&lt;文件名&gt;（指文件的路径和名称）,&lt;打开模式&gt;)</strong><br><strong>打开模式：①二进制文件：rt  ②文本文件：rb</strong></p><h3 id="文件的路径："><a href="#文件的路径：" class="headerlink" title="文件的路径："></a>文件的路径：</h3><p><strong>①绝对路径：例如文件在”D:\Python\f.txt”，由于Python中”&quot;是转义字符，所以在输入路径是要把”&quot;改成”/“，也就是”D:/Python/f.txt”<br>②相对路径：指从文件所属的根目录起，如果文件是在D盘，那么可以直接输入”./Python/f.txt”，也就是从上级目录开始</strong></p><h3 id="打开模式："><a href="#打开模式：" class="headerlink" title="打开模式："></a>打开模式：</h3><table><thead><tr><th>文件打开模式</th><th>描述</th></tr></thead><tbody><tr><td>“r”</td><td>只读模式，默认值，如果文件不存在，返回FileNotFoundError</td></tr><tr><td>“w”</td><td>覆盖写模式，文件不存就则创建，存在则完全覆盖</td></tr><tr><td>“x”</td><td>创建写模式，文件不存在则创建，存在则返回FileExistsError</td></tr><tr><td>“a”</td><td>追加写模式，文件不存在则创建，存在则在文件最后追加内容</td></tr><tr><td>“b”</td><td>二进制文件的模式</td></tr><tr><td>“t”</td><td>文本文件的模式</td></tr></tbody></table><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">)</span>文本形式、只读模式、默认值</code></pre><h2 id="文件读取："><a href="#文件读取：" class="headerlink" title="文件读取："></a>文件读取：</h2><table><thead><tr><th align="center">操作方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><f>.read(size = &lt;长度&gt;)</td><td align="center">读入全部内容，如果给出参数，读出前size长度</td></tr><tr><td align="center"><f>.readline(size = &lt;长度&gt;)</td><td align="center">读入一行内容，如果给出参数，读入该行前size长度</td></tr><tr><td align="center"><f>.readlines(hint = &lt;行数&gt;)</td><td align="center">读入文件所有行，以每行元素形成列表，如果给出参数hint，读入前hint行</td></tr></tbody></table><h3 id="文件的全文本操作："><a href="#文件的全文本操作：" class="headerlink" title="文件的全文本操作："></a>文件的全文本操作：</h3><p><strong>①：直接读取文件中的所有内容，当文件较大时，占用内存较大</strong></p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/Python/素材/Test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>②：每次读取2个字节（可选择），占用内存较小</strong></p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/Python/素材/Test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">while</span> txt <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>    txt <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="文件的逐行操作："><a href="#文件的逐行操作：" class="headerlink" title="文件的逐行操作："></a>文件的逐行操作：</h3><p><strong>①：利用readlines()函数，一次性读入所有行，形成列表，但占有内存太大</strong></p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/Python/素材/Test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>②：每次读入一行数据，占有内存较小</strong></p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/Python/素材/Test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="文件写入："><a href="#文件写入：" class="headerlink" title="文件写入："></a>文件写入：</h2><table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td><f>.write(s)</td><td>向文件写入一个字符串或字节流</td></tr><tr><td><f>.writelines(lines)</td><td>将元素全字符串的列表写入文件</td></tr><tr><td><f>.seek(offset)</td><td>改变当前文件操作指针的位置，offset含义如下：0 - 文件开头；1 - 当前位置；2 - 文件结尾</td></tr></tbody></table><p><strong>向文件后添加一行文字并输出添加后的文件：</strong></p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/Python/素材/Test.txt"</span><span class="token punctuation">,</span><span class="token string">"a+"</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">,</span><span class="token string">"英国"</span><span class="token punctuation">]</span>fo<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>实例：自动轨迹绘制</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle <span class="token keyword">as</span> tf <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"D:/Python/素材/自动轨迹绘制.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>eval<span class="token punctuation">,</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"自动轨迹绘制"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>right<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>left<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="一维数据的格式化："><a href="#一维数据的格式化：" class="headerlink" title="一维数据的格式化："></a>一维数据的格式化：</h2><h3 id="一维数据的表示："><a href="#一维数据的表示：" class="headerlink" title="一维数据的表示："></a>一维数据的表示：</h3><p><strong>数据间有序：使用列表类型<br>数据间无序：使用集合类型<br>使用for循环进行遍历</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从空格分隔的文件中读入数据</span>txt <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> txt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二维数据的格式化："><a href="#二维数据的格式化：" class="headerlink" title="二维数据的格式化："></a>二维数据的格式化：</h2><h3 id="二维数据的存储："><a href="#二维数据的存储：" class="headerlink" title="二维数据的存储："></a>二维数据的存储：</h3><p><strong>二维数据用二维列表表达：</strong><br><strong>列表中的每个元素对应一个新的列表，因而构成二维列表</strong></p><h3 id="CSV数据存储格式"><a href="#CSV数据存储格式" class="headerlink" title="CSV数据存储格式"></a>CSV数据存储格式</h3><p><strong>CSV:Comma-Separated Values</strong><br><strong>-国际通用的一二维数据存储格式，一般.csv扩展名<br>-每行一个一维数据，采用逗号分隔，无空行<br>-Excel和一般编辑软件都可以读入或另存为csv文件</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random库</title>
      <link href="/2019/05/17/Python-Random%E5%BA%93/"/>
      <url>/2019/05/17/Python-Random%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p><strong>random库是生成随机数的Python标准库</strong><br><strong>基本随机函数：seed(),random()<br>扩展随机函数：randint(),getrandbits(),uniform(),randrange(),choice(),shuffle()</strong></p><a id="more"></a><h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><p><strong>① seed(a)：初始化给定的随机数种子，默认为当前系统时间<br>② random()：生成一个[0.0,1.0]之间的随机小数</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random <span class="token keyword">as</span> rr<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>③ randomint(a,b)：生成一个数值在a-b之间的随机整数<br>④ randrange(m,n,k)：生成一个m-n之间k为步长的整数<br>⑤ getrandbits(k)：生成一个k比特长的随机整数<br>⑥ uniform(a,b)：生成一个[a,b]之间的随机小数<br>⑦ choice(seq)：从序列seq中随机选出一个元素<br>⑧ shuffle(seq)：将序列seq中的元素随机排列，返回打乱后的序列</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random <span class="token keyword">as</span> rs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#输出打印乱后的结果</span></code></pre><p><strong>公式法计算圆周率PI：</strong></p><pre class=" language-python"><code class="language-python">pi <span class="token operator">=</span> <span class="token number">0</span>N <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pi <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">/</span>pow<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率的值为：{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：3.141592653589793</span></code></pre><p><strong>蒙特卡罗法计算圆周率：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random <span class="token keyword">as</span> r<span class="token keyword">import</span> time <span class="token keyword">as</span> td <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span>hits <span class="token operator">=</span> <span class="token number">0</span>st <span class="token operator">=</span> t<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">,</span>y <span class="token operator">=</span> r<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pow<span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1.0</span><span class="token punctuation">:</span>        hits <span class="token operator">+=</span> <span class="token number">1</span>pi <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> hits <span class="token operator">/</span> d<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率为:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序运行时间为:{:.2f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> st<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordCloud库</title>
      <link href="/2019/05/17/Python-Wordcloud%E5%BA%93/"/>
      <url>/2019/05/17/Python-Wordcloud%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>wordcloud是优秀的第三方词云库</strong><br><strong>wordcloud库常规方法：<br>w = wordcloud.WordCloud()</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>w.generate(txt)</td><td>向WordCloud对象w中加载文本txt</td></tr><tr><td>w.to_file(filename)</td><td>将慈云输出位图像文件，.png或.jpg格式</td></tr></tbody></table><a id="more"></a><h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><p><strong>词云绘制:<br>步骤1：配置对象参数<br>步骤2：加载词云文本<br>步骤3：输出词云文件</strong><br><strong>配置对象参数：</strong><br><strong>w = wordcloud.WordCloud(&lt;参数&gt;)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>指定词云对象生成图片的宽度，默认为400像素</td></tr><tr><td>heigth</td><td>指定词云对象生成图片的高度，默认为200像素</td></tr><tr><td>min_font_size</td><td>指定词云中字体的最小字号，默认4号</td></tr><tr><td>max_font_size</td><td>指定词云中字体的最大字号，根据高度自动调节</td></tr><tr><td>font_step</td><td>指定词云中字体字号的步进间隔，默认为1</td></tr><tr><td>font_path</td><td>指定字体文件的路径，默认为None，w = wordcloud.WordCloud(font_path = “msyh.ttc”)表示微软雅黑</td></tr><tr><td>max_words</td><td>指定词云显示的最大单词数量，默认为200</td></tr><tr><td>stop_words</td><td>指定词云的排除词列表，即不显示的单词列表</td></tr><tr><td>mask</td><td>指定词云形状，默认为长方形，需要imread函数</td></tr><tr><td>background_color</td><td>指定词云图片的背景颜色，默认为黑色</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Os库</title>
      <link href="/2019/05/17/Python-Os%E5%BA%93/"/>
      <url>/2019/05/17/Python-Os%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><a id="more"></a><table><thead><tr><th>函数</th><th>方法</th></tr></thead><tbody><tr><td>os.path.abspath(path)</td><td>返回path在当前系统中的绝对路径</td></tr><tr><td>os.path.normpath(path)</td><td>归一性path的表示形式，同意使用\分隔路径</td></tr><tr><td>os.path.relpath(path)</td><td>返回当前程序与文件之间的相对路径</td></tr><tr><td>os.path.dirname(path)</td><td>返回path中的目录名称</td></tr><tr><td>os.path.basename(path)</td><td>返回path中最后的文件名称</td></tr><tr><td>os.path.join(path,paths)</td><td>组合path和paths，返回一个路径字符串</td></tr><tr><td>os.path.exists(path)</td><td>判断path对应文件或目录是否存在，返回True或False</td></tr><tr><td>os.path.getatime(path)</td><td>返回path对应文件或目录上一次的访问时间</td></tr><tr><td>os.path.getmtime(path)</td><td>返回path对应文件或目录最后一次的修改时间</td></tr><tr><td>os.path.getctime(path)</td><td>返回path对应文件或目录的创建时间</td></tr><tr><td>os.system(执行文件的路径)</td><td>执行对应的文件</td></tr><tr><td>os.listdir()</td><td>路径为空则os.list(‘.’) 将当前目录下的文件名返回一个列表</td></tr><tr><td>os.path.splitext()</td><td>分离后缀名</td></tr><tr><td>os.rename(old,new)</td><td>更改文件名</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python组合数据类型</title>
      <link href="/2019/05/16/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89/"/>
      <url>/2019/05/16/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="集合类型及操作："><a href="#集合类型及操作：" class="headerlink" title="集合类型及操作："></a>集合类型及操作：</h2><p><strong>多个元素的无序组合</strong><br><strong>-用大括号表示，逗号分隔<br>-建立集合类型使用{}或者set()</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"PYPY123"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#由于集合中不能存在相同的元素而且元素无序所以输出结果为{'3', 'Y', '1', 'P', '2'}（每次的顺序都可能不一样）</span></code></pre><a id="more"></a><h3 id="集合操作符："><a href="#集合操作符：" class="headerlink" title="集合操作符："></a>集合操作符：</h3><table><thead><tr><th>操作符及应用</th><th>描述</th></tr></thead><tbody><tr><td>S  | T</td><td>返回一个新集合，包括在集合S和T中的所有元素</td></tr><tr><td>S - T</td><td>返回一个新集合，包括在集合S但不在T中的元素</td></tr><tr><td>S &amp; T</td><td>返回一个新集合，包括同时在集合S和T中的元素</td></tr><tr><td>S ^ T</td><td>返回一个新集合，包括集合S和T中的非相同元素</td></tr><tr><td>S &lt;= T 或 S &lt; T</td><td>返回True/False，判断S和T的子集关系</td></tr><tr><td>S &gt;= T 或 S &gt; T</td><td>返回True/False，判断S和T的子集关系</td></tr></tbody></table><p><strong>例如：</strong></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"pypy123"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a - b = {}\nb - a = {}\na &amp; b = {}\na | b = {}\na ^ b = {}\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">,</span>b<span class="token operator">-</span>a<span class="token punctuation">,</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">,</span>a<span class="token operator">|</span>b<span class="token punctuation">,</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：</span><span class="token comment" spellcheck="true">#a - b = {123}</span><span class="token comment" spellcheck="true">#b - a = {'3', '1', '2'}</span><span class="token comment" spellcheck="true">#a &amp; b = {'y', 'p'}</span><span class="token comment" spellcheck="true">#a | b = {'y', '3', 'p', '1', '2', 123}</span><span class="token comment" spellcheck="true">#a ^ b = {'3', '1', '2', 123}</span></code></pre><h3 id="集合处理方法："><a href="#集合处理方法：" class="headerlink" title="集合处理方法："></a>集合处理方法：</h3><table><thead><tr><th>操作函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>s.add(x)</td><td>如果x不在集合s中，将x增加到集合s</td></tr><tr><td>s.discard(x)</td><td>将x从集合s移除，如果x不在集合s中不报错</td></tr><tr><td>s.remove(x)</td><td>将x从集合s移除，如果x不在集合x中，产生KeyError异常</td></tr><tr><td>s.clear()</td><td>移除s中所有元素</td></tr><tr><td>s.pop()</td><td>随机返回s中的一个元素，更新s，若s为空产生KeyError异常</td></tr><tr><td>s.copy()</td><td>返回集合s的一个副本</td></tr><tr><td>len(s)</td><td>返回集合s中的元素个数</td></tr><tr><td>x in s</td><td>判断s中元素x，x在集合s中，返回True，否则返回False</td></tr><tr><td>x not in s</td><td>判断s中元素x，x不在集合s中，返回True，否则返回False</td></tr></tbody></table><p><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#简单操作</span>a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">2</span> <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2 is in a"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2 is not in a"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><h3 id="数据去重："><a href="#数据去重：" class="headerlink" title="数据去重："></a>数据去重：</h3><p><strong>集合类型可以用于各种数据去重，例如：给出一个列表ls，要求去掉列表中的重复元素，我们可以这样操作：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#先将列表类型转换为集合类型，再把集合类型转换为列表类型，这样就实现了简单的数据去重</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> set<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls <span class="token operator">=</span> list<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span></code></pre><h2 id="序列类型及操作："><a href="#序列类型及操作：" class="headerlink" title="序列类型及操作："></a>序列类型及操作：</h2><p><strong>序列是具有先后关系的一组元素<br>-序列是一维元素向量，元素类型可以不同</strong></p><h3 id="序列类型的操作方法："><a href="#序列类型的操作方法：" class="headerlink" title="序列类型的操作方法："></a>序列类型的操作方法：</h3><table><thead><tr><th>函数和方法</th><th>描述</th></tr></thead><tbody><tr><td>max(s)</td><td>返回序列s中的最大元素，s中元素需要可比较</td></tr><tr><td>min(s)</td><td>返回序列s中的最小元素，s中元素需要可比较</td></tr><tr><td>s.index(x)</td><td>返回序列s中x第一次出现的位置</td></tr><tr><td>s.index(x,i,j)</td><td>返回序列s从i开始到j位置中第一次出现元素x的位置</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#定义ls1，ls2为两个列表，一个存放数字，一个存放字符</span><span class="token comment" spellcheck="true">#max，min函数会根据字典序或者数字大小进行排序</span>ls1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>ls2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>ls1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>ls2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果：4 a</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#返回ls中元素1的第一次出现的位置</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：0</span></code></pre><h3 id="元组类型及操作："><a href="#元组类型及操作：" class="headerlink" title="元组类型及操作："></a>元组类型及操作：</h3><p><strong>元素是序列类型的一种扩展<br>-元组是一种序列类型，一旦创建就不能被修改<br>-使用小括号()或tuple()创建，元素间用逗号，分隔</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#元组的定义</span>s <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#s是一个元组，ss也是一个元组，但他内部有一个s元组，所以要想使用ss调用s中的元素，可以这样</span>s <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span>ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：2</span></code></pre><h4 id="列表类型及操作："><a href="#列表类型及操作：" class="headerlink" title="列表类型及操作："></a>列表类型及操作：</h4><p><strong>列表是序列类型的一种扩展<br>-列表是一种序列类型，创建后可以随意被修改<br>-使用[]或list()创建，元素间用逗号分隔</strong></p><table><thead><tr><th>函数及方法</th><th>描述</th></tr></thead><tbody><tr><td>ls[i] = x</td><td>将列表里第i的元素替换为x</td></tr><tr><td>ls[i:j:k] = lt</td><td>用列表lt替换ls切片后所对应元素子列表</td></tr><tr><td>del ls[i]</td><td>删除列表ls中的第i个元素</td></tr><tr><td>del ls[i:j:k]</td><td>删除列表从i到j，k为步长的元素</td></tr><tr><td>ls += lt</td><td>将lt中的元素增加到ls中，并更新ls</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#简单操作</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span>ls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#将第1个元素换成[1,2,3,4]组成的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">del</span> ls<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#删除步长为3的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span></code></pre><table><thead><tr><th>函数及方法</th><th>描述</th></tr></thead><tbody><tr><td>ls.append(x)</td><td>在列表ls后增加一个元素x</td></tr><tr><td>ls.pop(i)</td><td>取出ls中第i个元素，并删除（类似C/C++中的弹栈）</td></tr><tr><td>ls.remove(x)</td><td>删除列表ls中第一次出现的x</td></tr><tr><td>ls.reverse()</td><td>反转列表ls</td></tr><tr><td>ls.insert(i,x)</td><td>在列表第i个位置插入元素x</td></tr><tr><td>ls.copy()</td><td>生成一个新的列表，并复制ls中的所有元素</td></tr><tr><td>ls.clear()</td><td>清除列表ls中的所有元素</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#利用上面的函数进行操作：</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#在列表末尾增加一个元素3</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#在列表的第3个位置增加一个元素5</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#取出列表中的第1个元素并删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#删除列表中第一次出现的元素3</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#列表反转</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>ls<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#清空列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span></code></pre><h4 id="列表与元组的区别："><a href="#列表与元组的区别：" class="headerlink" title="列表与元组的区别："></a>列表与元组的区别：</h4><p><strong>列表内容可变，元组不可变，例如给出一个序列ls，一个元组s，对于序列ls，ls[0] = 1这种操作是正确的，但对与元组s，s[0] = 1是错误的，因而，列表中的元素可以改变，而元组中的元素不可变，所以列表是最常用的一种序列，元组类型主要用于数据保护。</strong></p><h3 id="字典类型及操作："><a href="#字典类型及操作：" class="headerlink" title="字典类型及操作："></a>字典类型及操作：</h3><p><strong>字典类型是“映射”的体现<br>-键值对：键是对数据索引的扩展<br>-字典是键值对的集合，键值对之间无序<br>-采用大括号{}和dict()创建，键值对用冒号:表示</strong> </p><table><thead><tr><th>函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>del d[k]</td><td>删除字典d中键k对应的数据值</td></tr><tr><td>k in d</td><td>判断键k是否在字典d中，在返回True否则返回False</td></tr><tr><td>d.keys()</td><td>返回字典d中所有的键的信息</td></tr><tr><td>d.values()</td><td>返回字典中所有值的信息</td></tr><tr><td>d.items()</td><td>返回字典d中所有的键值对信息</td></tr></tbody></table><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"中国"</span><span class="token punctuation">:</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">:</span><span class="token string">"华盛顿"</span><span class="token punctuation">,</span><span class="token string">"法国"</span><span class="token punctuation">:</span><span class="token string">"巴黎"</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">"中国"</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出所有的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出所有的键</span></code></pre><table><thead><tr><th>函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>d.get(k,<defaulf>)</td><td>键k存在就返回对应值，否则返回<defaulf>值</td></tr><tr><td>d.pop(k,<defaulf>)</td><td>键k存在就取出对应值，否则返回<defaulf>值</td></tr><tr><td>d.popitem()</td><td>随机从字典d中取出一个键值对，以元组类型返回</td></tr><tr><td>d.clear()</td><td>删除所有的键值对</td></tr><tr><td>len(d)</td><td>返回字典d中键值对的个数</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#新建字典d并向字典d中增加元素</span>d <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">,</span>val <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入键以及对应的值（空格隔开）"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="相关函数介绍："><a href="#相关函数介绍：" class="headerlink" title="相关函数介绍："></a>相关函数介绍：</h2><h3 id="enumerate-函数使用方式："><a href="#enumerate-函数使用方式：" class="headerlink" title="enumerate 函数使用方式："></a>enumerate 函数使用方式：</h3><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><p><strong>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</strong></p><h4 id="遍历方式："><a href="#遍历方式：" class="headerlink" title="遍历方式："></a>遍历方式：</h4><p><strong>①遍历时返回一个元组，第一个元素为下标，第二个元素为下标对应的值</strong></p><pre class=" language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>lss <span class="token operator">=</span> enumerate<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> lss<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下标{}对应的值为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>②用两个不同的变量表示遍历返回的元组，一个为下标，一个为对应的值</strong></p><pre class=" language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>lss <span class="token operator">=</span> enumerate<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>item <span class="token keyword">in</span> lss<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下标{}对应的值为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="zip函数使用方式："><a href="#zip函数使用方式：" class="headerlink" title="zip函数使用方式："></a>zip函数使用方式：</h3><h4 id="描述：将多个迭代器对象中的元素压缩，返回一个zip对象"><a href="#描述：将多个迭代器对象中的元素压缩，返回一个zip对象" class="headerlink" title="描述：将多个迭代器对象中的元素压缩，返回一个zip对象"></a>描述：将多个迭代器对象中的元素压缩，返回一个zip对象</h4><h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><pre class=" language-python"><code class="language-python">ls1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span>ls2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>ls <span class="token operator">=</span> zip<span class="token punctuation">(</span>ls1<span class="token punctuation">,</span>ls2<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>推导式（comprehensions），又称解析式。利用列表推导式、字典推导式、集合推导式可以从一个数据对象构建另一个新的数据对象。利用生成器推导式可以构建生成器对象。</strong></p><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><h4 id="列表推导式和循环语句"><a href="#列表推导式和循环语句" class="headerlink" title="列表推导式和循环语句"></a>列表推导式和循环语句</h4><p><strong>假如想用一个列表中所有元素的平方以构成一个新列表，当然，可以使用append进行添加，但是为了让程序更加简单，可以利用列表推导式与循环的结合</strong></p><pre class=" language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span></code></pre><h4 id="列表推导式和循环语句以及条件语句"><a href="#列表推导式和循环语句以及条件语句" class="headerlink" title="列表推导式和循环语句以及条件语句"></a>列表推导式和循环语句以及条件语句</h4><p><strong>除了上面说的列表推导式，进一步拓展，如果想要对序列中所有正整数进行平方运算，并形成一个新的列表，可以加入条件语句进行判断</strong></p><pre class=" language-python"><code class="language-python">ls0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ls0 <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span></code></pre><p><strong>在此基础上，如果想要将列表中的正整数平方，负整数保持不变，形成一个列表，可以使用三目运算符来完成</strong></p><pre class=" language-python"><code class="language-python">ls0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> ls0<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span></code></pre><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><h4 id="字典推导式和循环语句"><a href="#字典推导式和循环语句" class="headerlink" title="字典推导式和循环语句"></a>字典推导式和循环语句</h4><p><strong>将分别存有学生姓名与成绩的列表，整合到一个字典中，当然你可以，采用直接添加键值对的方式进行整合，这里介绍一种使用字典推导式的方法</strong></p><pre class=" language-python"><code class="language-python">id <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span>score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">]</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>j <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> zip<span class="token punctuation">(</span>id<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> item <span class="token keyword">in</span> dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="字典推导式和循环语句及条件语句"><a href="#字典推导式和循环语句及条件语句" class="headerlink" title="字典推导式和循环语句及条件语句"></a>字典推导式和循环语句及条件语句</h4><p><strong>使用方式与列表推导式一致，这里不多赘述</strong></p><h6 id="Tip：集合推导式博主不再介绍，个人感觉用处不大"><a href="#Tip：集合推导式博主不再介绍，个人感觉用处不大" class="headerlink" title="Tip：集合推导式博主不再介绍，个人感觉用处不大"></a>Tip：集合推导式博主不再介绍，个人感觉用处不大</h6>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数和代码复用</title>
      <link href="/2019/05/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89/"/>
      <url>/2019/05/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的定义和使用："><a href="#函数的定义和使用：" class="headerlink" title="函数的定义和使用："></a>函数的定义和使用：</h2><p><strong>-函数是一段具有特定功能的可重用的语句组</strong><br><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token punctuation">(</span><span class="token number">0</span>个或多个<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><a id="more"></a><p><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#求n的阶乘</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">return</span> ansn <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}的阶乘为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">,</span>cal<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="函数中的可选参数："><a href="#函数中的可选参数：" class="headerlink" title="函数中的可选参数："></a>函数中的可选参数：</h3><p><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span> <span class="token punctuation">,</span> <span class="token operator">&lt;</span>可选参数<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#非可选参数一定要放在可选参数之前</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><p><strong>在上述代码中进行更改，例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算N的阶乘整除m，如果函数中不传入参数m，那么m默认为1，所以将m称为可选参数</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">return</span> ans <span class="token operator">//</span> mn<span class="token punctuation">,</span>m <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请分别输入两个整数:(用逗号隔开)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cal<span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="函数中的可变参数："><a href="#函数中的可变参数：" class="headerlink" title="函数中的可变参数："></a>函数中的可变参数：</h3><p><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这与C/C++中的数组传地址有些类似,*参数可以类比于传入一个首地址</span><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token operator">></span> <span class="token punctuation">,</span> <span class="token operator">*</span>参数<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><p><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算n的阶乘然后再分成与1，2，3，4相乘</span><span class="token comment" spellcheck="true">#方法1：</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> ansn<span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cal<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#方法2：</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">return</span> ansn<span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cal<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="函数的返回值："><a href="#函数的返回值：" class="headerlink" title="函数的返回值："></a>函数的返回值：</h3><p><strong>-return保留字用来传递返回值，函数可以有返回值也可以没有返回值，return 可以传递0个返回值，也可以传递多个返回值</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算n!，n! * m , n! / m</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>N <span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">return</span> ans <span class="token punctuation">,</span> ans <span class="token operator">*</span> M <span class="token punctuation">,</span> ans <span class="token operator">//</span> Mn <span class="token punctuation">,</span> m <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请分别输入两个整数:（用逗号隔开）"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> cal<span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}! = {},{}! * {} = {},{}! / {} = {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输入5,2对应输出结果为：5! = 120,5! * 2 = 240,5!/2 = 60</span></code></pre><h3 id="局部变量和全局变量："><a href="#局部变量和全局变量：" class="headerlink" title="局部变量和全局变量："></a>局部变量和全局变量：</h3><p><strong>-函数内部使用变量叫做局部变量，函数外部使用变量酒窖全局变量</strong><br><strong>-全局变量和局部变量即使名字是相同的也是不同的变量</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#可以看到有两个ans变量，但输出结果为3628800 50，所以全局变量和局部变量即使名字一样但也是不同的变量</span>n<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">return</span> ans<span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span></code></pre><p><strong>如果想要在函数中使用全局变量，我们可以使用global保留字声明，例如：</strong></p><pre class=" language-python"><code class="language-python">n<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> ans      <span class="token comment" spellcheck="true">#这里的ans就是10</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">*=</span> i    <span class="token keyword">return</span> ans<span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span></code></pre><p><strong>-局部变量为组合数据类型且未创建，等同于全局变量</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为：["F","f","c"]</span></code></pre><h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h3><p><strong>使用方式：</strong><br><strong>&lt;函数名&gt; = lambda &lt;参数&gt;: &lt;表达式&gt;</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y <span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为30</span></code></pre><p><strong>实例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#七段数码管</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> t<span class="token keyword">import</span> time <span class="token keyword">as</span> ti<span class="token keyword">def</span> <span class="token function">drawline</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> draw <span class="token keyword">else</span> t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawdigit</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">:</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> digit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    init<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawdata</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"年"</span><span class="token punctuation">,</span>font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Arial"</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"月"</span><span class="token punctuation">,</span>font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Arial"</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"日"</span><span class="token punctuation">,</span>font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Arial"</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            drawdigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> ti<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m=%d+'</span><span class="token punctuation">,</span>ti<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    init<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    drawdata<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="代码复用与函数递归："><a href="#代码复用与函数递归：" class="headerlink" title="代码复用与函数递归："></a>代码复用与函数递归：</h2><h3 id="函数的递归："><a href="#函数的递归：" class="headerlink" title="函数的递归："></a>函数的递归：</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算n的阶乘</span><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> cal<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>n <span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果为120</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#递归翻转字符串</span><span class="token keyword">def</span> <span class="token function">rev</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">else</span> rev<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>rev<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例:</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Python科赫雪花</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> t<span class="token keyword">def</span> <span class="token function">coh</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>            coh<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    init<span class="token punctuation">(</span><span class="token punctuation">)</span>    coh<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>    coh<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>    coh<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python程序的控制结构</title>
      <link href="/2019/05/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/"/>
      <url>/2019/05/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="程序的分支结构："><a href="#程序的分支结构：" class="headerlink" title="程序的分支结构："></a>程序的分支结构：</h2><h3 id="单分支结构："><a href="#单分支结构：" class="headerlink" title="单分支结构："></a>单分支结构：</h3><p><strong>根据判断条件结果而选择不同的向前路径</strong><br><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>  <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><a id="more"></a><h3 id="二分支结构："><a href="#二分支结构：" class="headerlink" title="二分支结构："></a>二分支结构：</h3><p><strong>根据判断条件结果而选择不同向前路径的运行方式</strong><br><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span></code></pre><p><strong>紧凑形式：适用于简单表达式的二分之结构<br>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token keyword">else</span> <span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span></code></pre><p><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#判断奇偶，偶数输出YES奇数输出NO</span>ans <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> ans <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span></code></pre><h3 id="多分支结构："><a href="#多分支结构：" class="headerlink" title="多分支结构："></a>多分支结构：</h3><p><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span><span class="token keyword">else</span> ：    <span class="token operator">&lt;</span>语句<span class="token number">3</span><span class="token operator">></span></code></pre><h3 id="条件组合的三个保留字："><a href="#条件组合的三个保留字：" class="headerlink" title="条件组合的三个保留字："></a>条件组合的三个保留字：</h3><p><strong>① x and y：逻辑与（相当于C/C++中的 &amp;&amp;），x与y，同1为1，否则为0<br>② x or y：逻辑或（相当于C/C++中的 ||），x或y，有1为1，全0为0<br>③ not x：逻辑非（相当于C/C++中的 !），not 1 为 0 ，not 0 为1</strong></p><h3 id="程序异常处理："><a href="#程序异常处理：" class="headerlink" title="程序异常处理："></a>程序异常处理：</h3><p><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span> <span class="token operator">&lt;</span>异常类型<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span></code></pre><p><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#判断奇偶</span><span class="token keyword">try</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}是{}数"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token string">"偶"</span> <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">"奇"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数"</span><span class="token punctuation">)</span></code></pre><h3 id="异常处理的高级使用："><a href="#异常处理的高级使用：" class="headerlink" title="异常处理的高级使用："></a>异常处理的高级使用：</h3><p><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当语句1执行时，语句3也执行，如果发生异常，语句2执行，无论是否异常，语句4都执行</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span>：    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">3</span><span class="token operator">></span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">4</span><span class="token operator">></span></code></pre><p><strong>实例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#BIM身体质量指标判断</span>who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>bmi<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span>        who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"偏瘦"</span><span class="token punctuation">,</span><span class="token string">"偏瘦"</span>    <span class="token keyword">elif</span> <span class="token number">18.5</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">:</span>        who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"正常"</span><span class="token punctuation">,</span><span class="token string">"正常"</span>    <span class="token keyword">elif</span> <span class="token number">24</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">:</span>        who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"正常"</span><span class="token punctuation">,</span><span class="token string">"偏胖"</span>    <span class="token keyword">elif</span> <span class="token number">25</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">:</span>        who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"偏胖"</span><span class="token punctuation">,</span><span class="token string">"偏胖"</span>    <span class="token keyword">elif</span> <span class="token number">28</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">:</span>        who<span class="token punctuation">,</span>nat <span class="token operator">-</span> <span class="token string">"偏胖"</span><span class="token punctuation">,</span><span class="token string">"肥胖"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"肥胖"</span><span class="token punctuation">,</span><span class="token string">"肥胖"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"BIM指标为:国际:{},国内{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>who<span class="token punctuation">,</span>nat<span class="token punctuation">)</span><span class="token punctuation">)</span>height <span class="token punctuation">,</span> weight <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入身高（米）和体重（公斤）[用逗号隔开]:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bmi <span class="token operator">=</span> weight <span class="token operator">/</span> pow<span class="token punctuation">(</span>height<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"BIM 的数值为:{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>bmi<span class="token punctuation">)</span><span class="token punctuation">)</span>judge<span class="token punctuation">(</span>bmi<span class="token punctuation">)</span></code></pre><h2 id="程序的循环结构："><a href="#程序的循环结构：" class="headerlink" title="程序的循环结构："></a>程序的循环结构：</h2><h3 id="遍历循环："><a href="#遍历循环：" class="headerlink" title="遍历循环："></a>遍历循环：</h3><p><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p><strong>计数循环（N次）：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#for i in range(N):</span><span class="token comment" spellcheck="true">#    &lt;语句块></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#输出从0到4之间的所有数字</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#for i in range(M,N,K):       从M开始到N-1结束，步长为K</span><span class="token comment" spellcheck="true">#    &lt;语句块>   </span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#输出结果为5，7，9（各占一行）</span></code></pre><p><strong>字符串遍历的两种方式：</strong></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true">#第一种</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#第二种</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span></code></pre><p><strong>列表遍历：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#输出结果为A,B,C（各占一行）</span></code></pre><p><strong>文件遍历：</strong></p><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#后面会具体介绍，这里只给出使用方式</span><span class="token comment" spellcheck="true">#fi是文件标识符</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fi<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环:"></a>无限循环:</h3><p><strong>由条件控制的循环运行方式</strong><br><strong>使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>循环条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><h3 id="循环控制保留字："><a href="#循环控制保留字：" class="headerlink" title="循环控制保留字："></a>循环控制保留字：</h3><p><strong>break：跳出循环<br>continue：结束当此循环，继续后面的循环</strong></p><h3 id="循环的高级用法："><a href="#循环的高级用法：" class="headerlink" title="循环的高级用法："></a>循环的高级用法：</h3><p><strong>for循环使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#当循环正常结束时（不是因break退出）执行else语句</span><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span></code></pre><p><strong>while循环使用方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#当循环正常结束时（不是因break退出）执行else语句</span><span class="token keyword">while</span> <span class="token operator">&lt;</span>循环条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span></code></pre><p><strong>例1：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"123456"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正常退出"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#由于循环中不含break，所以最后会输出正常退出</span></code></pre><p><strong>例2：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"123456"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正常退出"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#由于for循环是因break退出，所以最后不会输出正常退出</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基本数据类型</title>
      <link href="/2019/05/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
      <url>/2019/05/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="数字类型及操作："><a href="#数字类型及操作：" class="headerlink" title="数字类型及操作："></a>数字类型及操作：</h3><h4 id="一、整数类型："><a href="#一、整数类型：" class="headerlink" title="一、整数类型："></a>一、整数类型：</h4><p><strong>可正可负，没有取值范围限制</strong><br><strong>pow(x,y)函数：</strong><br><strong>计算x的y次方，这里与其他变成语言不同的是，pow(x,y)没有上限，在C++中除了不怎么常用的int128之外，long long 是最大的整数类型，但是long long最多可以计算到2的64次方，而在Python中，pow(2,100)结果为1267650600228229401496703205376，不受任何限制，想算多大就算多大。</strong><br><strong>四种进制表示形式：</strong><br><strong>①十进制<br>②二进制，以0b或者0B开头<br>③八进制，以0o或者0O开头<br>④十六进制，以0x或者0X开头</strong></p><a id="more"></a><h4 id="二、浮点类型："><a href="#二、浮点类型：" class="headerlink" title="二、浮点类型："></a>二、浮点类型：</h4><p><strong>带有小数点以及小数的数字</strong><br><strong>round(x,d)函数：</strong><br><strong>对x四舍五入，d是保留位数，例如：round(0.78,1)，对0.78四舍五入保留一位小数，显然结果是0.8，由于浮点数运算间经常出现不确定尾数，但这些尾数一般发生在10的-16次方左右，因此在计算或比较过程中经常使用round函数辅助。</strong></p><h4 id="三、复数类型："><a href="#三、复数类型：" class="headerlink" title="三、复数类型："></a>三、复数类型：</h4><p><strong>复数：</strong><br><strong>z = a+bj的形式，a称为复数的实数部分，b称为复数的虚数部分，例如：z = 3 + 4j，我们使用z.real获得实部，z.imag获得虚部。<br>数值运算操作符。</strong></p><h4 id="基本数据运算操作符："><a href="#基本数据运算操作符：" class="headerlink" title="基本数据运算操作符："></a>基本数据运算操作符：</h4><p>① x + y：加法<br>② x - y：减法<br>③ x * y：乘法<br>④ x / y：除法，这里的除法与其他语言不同，并不是取整，而是计算出精确结果，10/3 = 3.333333…<br>⑤ x // y：整除，10 // 3 = 3<br>⑥ x % y：取模（取余），10 % 3 = 1<br>⑦ - x：x的相反数<br>⑧ x ** y：x的y次方，当y为小数是表示开方运算，例如，25 ** 0.5结果为5，功能与pow(x,y)一样</p><h4 id="数值运算函数："><a href="#数值运算函数：" class="headerlink" title="数值运算函数："></a>数值运算函数：</h4><p><strong>① abs(x)：表示x的绝对值<br>② divmod(x,y)：商余函数，(x // y , x % y)，同时输出商和余数，divmod(10,3)结果为(3,1)<br>③ pow(x,y)：表示x的y次方<br>④ pow(x,y,z)：表示x的y次方模z<br>⑤ round(x,d)：表示保留d为小数输出x，d省略时默认为0（取整）<br>⑥ max(x1,x2,x3,…,xn)：求出1-n所有数字中的最大值，n不限<br>⑦ min(x1,x2,x3,…,xn)：求出1-n所有数字中的最小值，n不限</strong></p><h4 id="数值转换函数："><a href="#数值转换函数：" class="headerlink" title="数值转换函数："></a>数值转换函数：</h4><p><strong>① int(x)：将x转换为整数，int(1.25)结果为1，int(“123”)结果为123（将字符串转换为整数）<br>② float(x)：作用与int(x)类似，将x转换为浮点数<br>③ complex(x)：将x转换为复数，complex(4)结果为(4+0j)</strong></p><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1:"></a>例题1:</h4><p><strong>一年365天，初始状态为1.0，假如工作日进步1%，休息日退步1%，那么一年以后的水平是多少？</strong></p><pre class=" language-python"><code class="language-python">dayup <span class="token operator">=</span> <span class="token number">1.0</span>dayfactor <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dayup <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">-</span> dayfactor    <span class="token keyword">else</span><span class="token punctuation">:</span>        dayup <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">+</span> dayfactor<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为:{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dayup<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h4><p><strong>A一年365天每天进步1%，不停歇，B一年365天每周工作五天休息两天，休息日退步1%，B需要在工作日每天进步多少才能达到A的进步效果呢？</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#法1：暴力枚举，并不准确</span><span class="token keyword">def</span> <span class="token function">dayUP</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    dayup <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            dayup <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.01</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dayup <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">+</span> df    <span class="token keyword">return</span> dayupdayfactor <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">while</span> dayUP<span class="token punctuation">(</span>dayfactor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">37.78</span><span class="token punctuation">:</span>    dayfactor <span class="token operator">+=</span> <span class="token number">0.001</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为:{:.4f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dayfactor<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 法2：数学方法计算，可以得到更精确的值</span>dayup <span class="token operator">=</span> <span class="token number">1.0</span>dayfactor <span class="token operator">=</span> <span class="token number">0.01</span>result <span class="token operator">=</span> dayup <span class="token operator">*</span> pow<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> dayfactor<span class="token punctuation">,</span><span class="token number">365</span><span class="token punctuation">)</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dayup <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">-</span> dayfactor    <span class="token keyword">else</span><span class="token punctuation">:</span>        cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果为:{:.4f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>result<span class="token operator">/</span>dayup<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">/</span>cnt<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="字符串类型及操作："><a href="#字符串类型及操作：" class="headerlink" title="字符串类型及操作："></a>字符串类型及操作：</h3><h4 id="字符串类型的表示："><a href="#字符串类型的表示：" class="headerlink" title="字符串类型的表示："></a>字符串类型的表示：</h4><p><strong>字符串由0个或多个字符组成的有序字符序列</strong></p><p><strong>-字符串由一对单引号或一对双引号表示仅表示单行字符串<br>-字符串由一堆三单引号或三双引号表示，可表示多行字符串<br>-字符串是字符的有序序列，可以对其中的字符进行索引<br>-字符串的序号，正向递增（从0开始），反向递减（从-1开始）</strong></p><h4 id="字符串切片的高级用法："><a href="#字符串切片的高级用法：" class="headerlink" title="字符串切片的高级用法："></a>字符串切片的高级用法：</h4><p><strong>使用[M:N:K]根据步长对字符串切片</strong><br><strong>-&lt;字符串&gt;[M:N]，M缺失表示至开头，N缺失表示至结尾，例如：”12345678”，[:3]结果是”123”，[3:]结果为”45678”<br>-&lt;字符串&gt;[M:N:K]，根据步长对字符串进行切片，以M为起始点，K为步长，N-1为终止点，例如：”12345678”，[0:6:2]的结果为”135”，如果我们想倒序输出字符串，那么可以这样[::-1]，字符串从开头到结尾，步长为-1（从后往前）</strong></p><h4 id="字符串操作符："><a href="#字符串操作符：" class="headerlink" title="字符串操作符："></a>字符串操作符：</h4><p><strong>①x + y：连接两个字符串x和y<br>②n * x 或 x * n：复制n次字符串x<br>③x in s：如果x是s的子串返回True否则返回False</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字符串操作符的简单应用</span>s1 <span class="token operator">=</span> <span class="token string">"12345678"</span>s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token keyword">if</span> s2 <span class="token keyword">in</span> s1<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#判断子串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">+</span> s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#连接2个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#将字符串s2复制三次</span></code></pre><h4 id="字符串处理函数："><a href="#字符串处理函数：" class="headerlink" title="字符串处理函数："></a>字符串处理函数：</h4><p><strong>① len(s)：字符串s的长度，len(“1234”)结果为4<br>② str(s)：将任何类型的数据转换为字符串，str(1.5)结果为”1.5”，这与eval()评估函数类似，eval()函数是将最外侧的引号去掉后执行剩下的语句，str()函数相当于在最外侧加上一对引号<br>③ hex(x)：将整数x转换成其十六进制小写表示形式的字符串<br>④ oct(x)：将整数x转换成其八进制小写表示形式的字符串<br>⑤ chr(u)：u为Unicode编码返回对应字符，这里有一个有趣的实例，输出12个星座</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">9800</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">"  "</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这是输出的结果♈  ♉  ♊  ♋  ♌  ♍  ♎  ♏  ♐  ♑  ♒  ♓</span></code></pre><p><strong>⑥ ord(x)：x为字符，返回其对应的Unicode编码</strong></p><h4 id="字符串的处理方法："><a href="#字符串的处理方法：" class="headerlink" title="字符串的处理方法："></a>字符串的处理方法：</h4><p><strong>① str.upper()或str.lower()：返回字符串str的副本，upper为全大写，lower为全小写<br>② str.split(sep)：返回一个列表，由str根据sep被分割的部分组成，”A,B,C”.split(“,”)结果为[‘A’,’B’,’C’]<br>③ str.count(sub)：返回子串sub在字符串str中出现的次数<br>④ str.replace(old,new)：返回字符串的副本，将str中的old子串替换为new子串，”number”.replace(“n”,”1”)结果为1umber<br>⑤ str.center(width,fillchar) 字符串str根据宽度width居中，filllchar可选，例如：”python”.center(20,”=”)结果为”=======python=======”<br>⑥ str.strip(chars)：从str中去掉在其左侧和右侧chars中列出的字符，例如”= python= “.strp(“ =np”)，取出字符串两侧的” “,”=”,”n”,”p”，所以输出的结果为：”ytho”<br>⑦ str.join(iter)：在iter变量除最后元素外的每一个元素后增加一个str，例如：”,”join(“12345”)结果为”1,2,3,4,5”</strong></p><h4 id="字符串类型格式化："><a href="#字符串类型格式化：" class="headerlink" title="字符串类型格式化："></a>字符串类型格式化：</h4><p><strong>我们把形如{}的叫做槽，在Python语言中，槽机制({})+format方法实现字符串类型的格式化</strong><br><strong>例如：”第{}台计算机的排名是{}”.format(1,2)，结果为：第1台计算机的排名是2，可以看到，第一个槽中对应的结果某人是format函数中的第一个变量然后依次向后。当然，如果想对应不同变量也是可以的，例如，想让第一个参数是2第二个参数是1，那么可以这样操作，第{1}台计算机的排名是{0}”.format(1,2)，这个意思就是，让第一个槽对应后面变量的第2个参数，第二个槽对应第一个参数，所以结果为：第2台计算机的排名是1</strong></p><h5 id="format-方法的格式控制："><a href="#format-方法的格式控制：" class="headerlink" title="format()方法的格式控制："></a>format()方法的格式控制：</h5><p><strong>槽内部对格式化的配置方式：{&lt;参数序号&gt; : &lt;格式控制标记&gt;}</strong></p><img src="/images/Post-Img-0.png" style="zoom:80%;" / loading="lazy"><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:=^20}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"PYTHON"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#字符串PYTHON以20个字符为宽度，居中对齐，剩余部分以=填充</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:=>20}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"PYTHON"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#字符串PYTHON以20个字符为宽度，右对齐，剩余部分以=填充</span></code></pre><pre class=" language-py"><code class="language-py">print("{:20}".format("PYTHON"))#如果只设置宽度，那么默认左对齐，剩余部分以空格填充</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:,.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">123456.789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 逗号为千位分隔符，.2f保留小数点后两位输出，结果为：123,456.79</span></code></pre><h3 id="time库的使用"><a href="#time库的使用" class="headerlink" title="time库的使用:"></a>time库的使用:</h3><h4 id="time库介绍："><a href="#time库介绍：" class="headerlink" title="time库介绍："></a>time库介绍：</h4><p><strong>Python标准库，time库包括三类函数：</strong><br><strong>-时间获取：time()，ctime()，gmtime()<br>-时间格式化：strftime()，strptime()<br>-程序计时：sleep()，perf_conuter()</strong></p><p><strong>time.time()函数：得到是从1970年一月一日0点到现在的一个以秒为单位的浮点数<br>time.ctime()函数：获取人类最易读的时间，包含年月日，星期，时间<br>time.gmtime()函数：获取一种计算机可处理的时间格式</strong></p><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><p><strong>① strftime(tpl,ts)：tpl是格式化模板字符串，用来定义输出效果，ts是计算实际内部时间类型变量，例如：</strong></p><pre class=" language-py"><code class="language-py">import timet = time.gmtime()print(time.strftime("%Y-%M-%D %H:%M:%S",t))</code></pre><table><thead><tr><th>格式化字符串</th><th>日期/时间说明</th><th>值范围</th></tr></thead><tbody><tr><td>%Y</td><td>年份</td><td>0000~9999</td></tr><tr><td>%m</td><td>月份</td><td>01~12</td></tr><tr><td>%B</td><td>月份名称</td><td>January~December</td></tr><tr><td>%b</td><td>月份名称缩写</td><td>Jan~Dec</td></tr><tr><td>%d</td><td>日期</td><td>01~31</td></tr><tr><td>%A</td><td>星期</td><td>Monday~Sunday</td></tr><tr><td>%a</td><td>星期缩写</td><td>Mon~Sun</td></tr><tr><td>%H</td><td>小时（24h制）</td><td>00~23</td></tr><tr><td>%I</td><td>小时（12h制）</td><td>01~12</td></tr><tr><td>%p</td><td>上/下午</td><td>AM,PM</td></tr><tr><td>%M</td><td>分钟</td><td>00~59</td></tr><tr><td>%S</td><td>秒</td><td>00~59</td></tr></tbody></table><p><strong>②strptime(str,tpl)：str是字符串形式的时间值，tpl是格式化模板字符串，用来定义输入效果</strong></p><h4 id="程序计时"><a href="#程序计时" class="headerlink" title="程序计时"></a>程序计时</h4><p><strong>测量时间：perf_counter()<br>返回一个CPU级别的精确时间计数值，单位为秒，由于这个计数值的起点不确定，连续调用差值</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">as</span> tst <span class="token operator">=</span> t<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cnt <span class="token operator">+=</span> <span class="token number">1</span>ed <span class="token operator">=</span> t<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环{}次运行的时间为:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cnt<span class="token punctuation">,</span>ed<span class="token operator">-</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>产生时间：sleep()<br>sleep(s)函数里的参数s代表休眠的时间，单位为秒，sleep(5)表示程序休眠五秒再执行<br>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">as</span> t<span class="token keyword">def</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">+=</span> iwait<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#程序再休眠五秒后再输出最后的结果</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1-10的和为{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例1：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 模拟文本进度条</span><span class="token keyword">import</span> time <span class="token keyword">as</span> twidth <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:-^15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"执行开始"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> i    b <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> i<span class="token punctuation">)</span>    per <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>width<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:^3.0f}%[{}->{}]"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>per<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:-^15}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例2：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#实现单行动态刷新</span><span class="token keyword">import</span> time <span class="token keyword">as</span> t<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r{:3}%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># \r表示光标回到起始位置，end = ""表示不换行</span>    t<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span></code></pre><p><strong>实例3：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#结合实例1和实例2实现动态刷新文本进度条功能</span><span class="token keyword">import</span> time <span class="token keyword">as</span> twidth <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行开始"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>width<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>st <span class="token operator">=</span> t<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> i    b <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> i<span class="token punctuation">)</span>    per <span class="token operator">=</span> i <span class="token operator">/</span> width <span class="token operator">*</span> <span class="token number">100</span>    dur <span class="token operator">=</span> t<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> st    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r{:^3.0f}%[{}->{}]{:.2f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>per<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>dur<span class="token punctuation">)</span> <span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"执行结束"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>width<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基本图形绘制</title>
      <link href="/2019/05/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2019/05/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="turtle的绘图窗体："><a href="#turtle的绘图窗体：" class="headerlink" title="turtle的绘图窗体："></a>turtle的绘图窗体：</h3><p><strong>turtle.setup(width,height,startx,starty)前两个参数是分别是窗体的长和宽，后两个参数分别是窗体左上角的横纵坐标。例如turtle.setup(800,800,0,0)这表示我们生成了一个长宽分别为800，800的窗体，左上角的坐标为(0,0)也就是位于屏幕的左上角，如果我们不给后面两个变量赋值，也就是turtle.setup(800,800)，那么窗体位置就默认位于屏幕中间。</strong></p><a id="more"></a><h3 id="turtle库函数："><a href="#turtle库函数：" class="headerlink" title="turtle库函数："></a>turtle库函数：</h3><h5 id="运动控制函数："><a href="#运动控制函数：" class="headerlink" title="运动控制函数："></a>运动控制函数：</h5><p><strong>turtle.goto(x,y)：从某点到达坐标为(x,y)的点<br>turtle.bk(d)：向反方向行进<br>turtle.fd(d)：向正前方行进<br>turtle.circle(r,angle)：如果r为正则以海龟左侧的点为圆心向左旋转angle°，如果r为负则表示圆心位于海龟右侧的点，并向右侧旋转angel°</strong></p><h5 id="方向控制函数："><a href="#方向控制函数：" class="headerlink" title="方向控制函数："></a>方向控制函数：</h5><p><strong>turtle.seth(angle)：改变行进角度但并不行进<br>turtle.left(angle)：将画笔方向向左旋转<br>turtle.right(angle)：将画笔方向向右旋转</strong></p><h5 id="画笔控制函数："><a href="#画笔控制函数：" class="headerlink" title="画笔控制函数："></a>画笔控制函数：</h5><p><strong>turtle.penup() / turtle.pu()：表示将画笔抬起，不留下痕迹，一般和turtle.pd()成对出现<br>turtle.pendown() / turtle.pd()：表示将画笔放下，一般和turtle.pu()成对出现<br>turtle.pensize(width) / turtle.width(width)：设置画笔的宽度<br>turtle.pencolor(color)：设置画笔的颜色<br>turtle.write(s,font=(“font-name”,fontsize,”fonttype”))：写文本，s为文本内容，font是字体的参数，里面分别为字体名称，大小和类型；font为可选项, font的参数也是可选项</strong></p><p><strong>利用以上内容在画布上画一个Z字形：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtleturtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置一个长宽分别为500的正方形窗口，左上角坐标（80，80）</span>turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#画笔向左旋转45°</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#画笔前进50个像素</span>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#画笔向右旋转135°</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#画笔前进100个像素</span>turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#画笔向左旋转135°</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#画笔前进50个像素</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#绘图结束</span></code></pre><h3 id="import的更多用法："><a href="#import的更多用法：" class="headerlink" title="import的更多用法："></a>import的更多用法：</h3><p><strong>①import &lt;库名&gt;<br>调用该库中的函数：&lt;库名&gt;.&lt;函数名&gt;（&lt;函数参数&gt;）<br>Tip：不会出现函数重名<br>②from &lt;库名&gt; import *<br>调用该库中的函数：&lt;函数名&gt;（&lt;函数参数&gt;）<br>Tip：会出现函数重名<br>③：import &lt;库名&gt; as &lt;库别名&gt;<br>调用该库中的函数：&lt;库别名&gt;.&lt;函数名&gt;（&lt;函数参数&gt;）</strong></p><p><strong>根据以上内容制作一个Python蟒蛇的实例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtleturtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pu<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pd<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基本语法元素</title>
      <link href="/2019/05/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2019/05/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><p><strong>input()输入函数使用格式：&lt;变量&gt; = input(&lt;提示信息字符串&gt;)<br>input()根据输入的类型不同，前面加上不同的数据类型，例如：如果输入int类型的数据，那么就是a = int(input())，这里有个特例，如果输入的是一个字符串，那么前面不需要加任何数据类型，直接是s = input(）</strong></p><a id="more"></a><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><p><strong>print()输出函数的使用格式：print(“输出内容”)<br>print()函数的格式化：假如输出一个小数，但要求保留两位小数，在Python中，我们可以这样做：<br>输入一个字符串，将字符串转换为数字，假设输入的是123.456，那么str的值为123.456，而保留两位小数后的输出结果为123.46，这里我们使用的是format函数，使用方法：”{:.保留位数f}.format(变量)”，后面会对format函数进行介绍，这里简单提一下</strong></p><pre class=" language-python"><code class="language-python">str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>num <span class="token operator">=</span> eval<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="评估函数："><a href="#评估函数：" class="headerlink" title="评估函数："></a>评估函数：</h3><p><strong>eval()评估函数：去掉参数最外侧引号并执行余下语句<br>eval()评估函数使用格式：eval(“字符串或字符串变量”)<br><code>eval(&quot;2+1&quot;)</code>得出的结果为3，除此之外，eval()函数还可以起到将字符串转换为数字的作用，下面这段代码表示，输入一个仅含数字的字符串，将该字符串除最后一个元素构成的字符串转换为数字并+1，假如我们输出的是187，那么eval(s[0:-1])也就是18，因此输出的为19</strong></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入一个数字:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h5 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h5><p><strong>循环语句的使用格式：for &lt;变量&gt; in range(&lt;参数&gt;)<br>                                &lt;被循环执行的语句&gt;<br>Tip：&lt;变量&gt;表示每次循环的计数，0~&lt;次数&gt;-1<br>range()函数：<br>①range(N)：产生0到N-1的整数序列，共N个<br>②range(M,N)：产生M到N-1的整数序列，共N-M个</strong><br><strong>例如：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#或：</span><span class="token comment" spellcheck="true">#for i in range(0,10):</span><span class="token comment" spellcheck="true">#   print(i)</span></code></pre><h4 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h4><p><strong>列表在Python中是一种新的数据类型列表使用[]表示，采用逗号(,)分隔各元素[‘L’,’l’]表示两个元素L和l，使用保留字in来判断一个元素是否在列表中，后面会具体介绍。</strong></p><h4 id="字符串的简单操作："><a href="#字符串的简单操作：" class="headerlink" title="字符串的简单操作："></a>字符串的简单操作：</h4><p><strong>如果我们要找到字符串s的长度，我们可以直接使用len函数，长度 = len(s)，在Python中字符串有两种序号，一种是正向递增序号也就是第一个字符的下标从0开始向后递增，还有一种是反向递减序号也就是最后一个字符串的下标从-1开始向前递减，因此如果我们要判断一个字符串s的最后一位，我们可以直接取s的第-1个下标，也就是s[-1]。如果我们判断过程中需要判断字符串中某一位是否为固定的两个字符，那么我们可以使用列表，具体看如下代码：<br>这段代码的意思是，如果字符串s的最后一位是L或者l，那么输出YES，否则输出NO</strong></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span></code></pre><p><strong>如果我们要取出字符串s的某个子串，例如s一共由构成8个字符，我们只想去除前三个字符构成的子串，那么我们可以这样输出print(s[0:3])这表示输出下标为0，1，2的字符，所以s[M:N]表示取出下标从M到N-1的字符构成的字符子串。<br>下面是一个实例：</strong></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">//</span>以int类型输入数据s <span class="token operator">=</span> <span class="token string">"Hello World"</span>L <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>              <span class="token operator">//</span>len表示字符串s的长度<span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token operator">//</span> 这里表示下标从i <span class="token operator">=</span> <span class="token number">0</span> 到 i <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
